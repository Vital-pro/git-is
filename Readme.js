//! Начинаем. У меня папка с проектом, которая называется git-is Зайдем в нее и напишем
//? git init
//*    Ответ CLI: Initialized empty Git repository in D:/Dima/Начальное-обучение/git-is/.git/
//* Это значит, что git инициализирован и дает возможность использовать в ней git. Так видим, что в
//* этой папке появилась папка .git, где собственно и находятся все файлы гита этого проекта.
//*     Можем перейти в эту папку:
//? cd .git
//*     и посмотреть её содержимое:
//? ls
//*     Выйдем из папки
//? cd ..
//*    Проверим состояние git:
//? git status
//*     Ответ CLI:
//* On branch master
//* Initial commit
//* nothing to commit...
//! Создадим новый файл, write in CLI или вручную:
//? touch newfile.js
//* И теперь, если проверим состояние git, то уже увидим изменения:
//? git status
//*      Ответ CLI: Untracked files:
//* (use "git add <file>..." to include in what will be committed)
//! newfile.js
//*  Красный, значит, появился новый файл, гит его не отслеживает. Добавим его для отслеживания гитом. Если мы будем делать изменения в этом файле, гит нам покажет
//? git add <newfile> (для именно этого файла) или 
//? git add .  (Точка в конце! для вообще ВСЕХ новых )
//* И теперь, если проверим состояние git, то уже увидим изменения:
//? git status
//*     Ответ CLI:   On branch master
//*  No commits yet
//* Changes to be committed: (use "git rm --cached <file>..." to unstage)
//* new file: newfile.js   (уже будет зеленый)
//!  Теперь для окончания работы с файлом нужно сделать commit. 
//* Закоммитить - значит зафиксировать изменения в памяти гита
//? git commit -m 'Start project'
//* закоммитить с message о том или ином изменении
//*     Ответ CLI: (кратко, т.к. файл был просто пустой)
//* [master (root-commit) 048f8c7] Start project
//* 1 files changed, 29 insertions(+)
//* create mode 100644 newfile.js
//! Посмотреть список коммитов можно командой
//? git log
//*     Ответ CLI: commit f8c74024b4293cf53a2bb8d5ee40bdb4bc8e8 (HEAD -> master)
//* Author: Vital-pro <Vital-pro@yandex.ru>
//* Date:   Sat Sep 16 14:53:55 2023 +0300
//*  Start project

//! Следующий этап. Сделаем изменения в файле (-ах)
function( a, b) {
  return a * b;
}
//* И теперь, если проверим состояние git, то уже увидим изменения:
//? git status
//!  modified:   newfile.js
//todo Пасмотрим, как гит видит наши изменения
//? git diff newfile.js
//* Теперь зафиксируем изменения:
//? git add .
//? git commit -m 'added function'
//* теперь, если посмотреть список коммитов, уже будут 2 commits
//? git log
//! если мы хотим посмотреть, какие сделаны изменения в каком-то commit
//? git show 8c041e2453a06ca31f3b9e27daa1910a1b0c42e7
//! если мы хотим ПЕРЕЙТИ на какой-то commit
//? git checkout 8c041e2453a06ca31f3b9e27daa1910a1b0c42e7

//* Сделаем еще изменения внутри файла и после этого посмотрим
//? git diff
//*и увидим, обозначенные цветом, какие сделаны изменения, что на что изменилось

//!    Залить проект на  GitHub repository -> github.com
//* мы создали базовый репозиторий гита и сделали несколько коммитов. Сейчас мы будем заливать нашу работу в гитхаб. Там можно хранить свой проект и в любой момент слить его на любую машину, что очень удобно.
//* Справа наверху жмем на крестик потом -> New repository.
//*  Появляются вкладка Owner* (данные твои автоматически). И вкладка Repository name* (сюда пишем
//*название будущего проекта) Больше ничего. И теперь внизу зеленую кнопку -> Create repository. 
//* Появляется страничка быстрого запуска. Тут написано, что делать, если у вас новый репозиторий гита, и что делать, если у вас уже готовый проект, который вы хотите залить.
//* В нашем случае настройка должна стоять на HTTS. И нас интересует push существующего репозитория. Для этого копируем первую строчку в консоль проекта.
//? git remote add origin https://github.com/monsterlessons/learning_git.git
//* Это добавляет новый удаленный сервер гитхаба в список серверов куда мы можем push-ить. Origin это название сервера. Обычно оно стандартное хотя вы можете выбрать любое имя.
//* То что он у нас добавился мы можем посмотреть командой
//? git remote -v
//* Ответ CLI: 
//? origin  https://github.com/Vital-pro/git-is.git (fetch)
//? origin  https://github.com/Vital-pro/git-is.git (push)
//* И оно нам выводит репозиторий, который мы добавили.
//*   Добавим вторую строчку:
//? git push -u origin master
//* В консоли оно запрашивает логин и пароль. Вводим оба. Видим сообщение, что данные были записаны в нашу репу на гитхабе.
//* Теперь если мы обновим окно репозитория в браузере, то мы увидим наш репозиторий на гитхабе.
//! Дальше работаем просто:
//? - git push origin master   Пушим наши изменения на сервер гитхаба
//? - git pull origin master   Сливаем себе в проект новые изменения, если они есть, из удаленного репозитария на любой комп. После работы не забываем опять сделать git push!

//! Теперь поработаем? создадим новый файл и запушим на гитхаб:
//? git add .
//? git commit -m 'added file newTs.ts'
//? git push origin master
//* Всё готово! Если теперь мы обновим страницу в браузере, то увидим, что у нас стало 4 коммита, а в списке файлов появился новый

 //!    Команды:
//? - git add . (в конце точка!) Добавляем ВСЕ новые файлы
//? - git commit -m "Added any file.js"  делаем commit, пишем комментарии
//? - git push origin master   Пушим наши изменения на гитхаб
//? - git pull origin master   Сливаем себе в проект новые изменения из удаленного репозитария.

//? git status
//? git log
//? git diff
//? git show 8c041e2453a06ca31f3b9e27daa1910a1b0c42e7
//? git checkout 8c041e2453a06ca31f3b9e27daa1910a1b0c42e7
